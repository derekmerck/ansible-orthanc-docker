-- FROM OSIMIS DISTRO --

-- Compress incoming DICOM _image_ files as a JPEG2k file.

function OnStoredInstance(instanceId, tags, metadata, origin)

    -- Do not process the same file twice
    if  (origin['RequestOrigin'] ~= 'Lua') then

        -- Do not try to compress:
        --   dose report/enhanced dose report or secondary
        --   non-value/rep pixels
        --   ... non-CT
        --   ... non-square          tags['Rows] == tags['Columns']
        if ((metadata['SopClassUid'] ~= '1.2.840.10008.5.1.4.1.1.88.22' and
             metadata['SopClassUid'] ~= '1.2.840.10008.5.1.4.1.1.88.67' and
             metadata['SopClassUid'] ~= '1.2.840.10008.5.1.4.1.1.7') and
            (metadata['TransferSyntax'] == '1.2.840.10008.1.2' or
             metadata['TransferSyntax'] == '1.2.840.10008.1.2.1' or
             metadata['TransferSyntax'] == '1.2.840.10008.1.2.1.99' or
             metadata['TransferSyntax'] == '1.2.840.10008.1.2.2')) then

            -- Retrieve the incoming DICOM instance from Orthanc
            local dicom = RestApiGet('/instances/' .. instanceId .. '/file')

            -- Write the DICOM content to some temporary file
            local uncompressed = instanceId .. '-uncompressed.dcm'
            local target = assert(io.open(uncompressed, 'wb'))
            target:write(dicom)
            target:close()

            -- Compress to JPEG2000 using gdcm
            local compressed = instanceId .. '-compressed.dcm'
            os.execute('gdcmconv -U --j2k ' .. uncompressed .. ' ' .. compressed)

            -- Read the JPEG2000 file
            local source = assert(io.open(compressed, 'rb'))
            local jpeg2k = source:read("*all")
            source:close()

            -- Remove the uncompressed file and upload the JPEG2000 file w same ID
            RestApiDelete('/instances/' .. instanceId)
            local jpeg2kInstance = ParseJson(RestApiPost('/instances', jpeg2k))

            -- Remove the temporary DICOM files
            os.remove(uncompressed)
            os.remove(compressed)

            print(instanceId)
            print(jpeg2kInstance['ID'])
            PrintRecursive(jpeg2kInstance)
            instanceID = jpeg2kInstance['ID']

        end

        -- forward instanceId to the destination(s) and delete
        {%- for d in destinations %}
            {%- if d.type == "dicom" %}

        SendToModality( instanceId, '{{ d.dest }}' )

            {%- elif d.type == "peer" %}

        SendToPeer( instanceId, '{{ d.dest }}' )

            {%- endif %}
        {%- endfor %}

        Delete( instanceId )

   end
end